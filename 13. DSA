#include <stdio.h>
#include <stdlib.h>
#include <math.h>

long long mod_exp(long long base, long long exp, long long mod) {
    long long result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

long long mod_inverse(long long a, long long m) {
    long long m0 = m, t, q;
    long long x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    return (x1 + m0) % m0;
}

int main() {
    long long p = 23;
    long long q = 11;
    long long h = 2;
    long long g = mod_exp(h, (p - 1) / q, p); // g = h^((p-1)/q) mod p
    printf("Public Parameters:\np = %lld\nq = %lld\ng = %lld\n", p, q, g);

    long long x = 4; // private key
    long long y = mod_exp(g, x, p); // public key
    printf("Private key x = %lld\nPublic key y = %lld\n", x, y);

    long long hm;
    printf("Enter hash of message (as integer): ");
    scanf("%lld", &hm);

    long long k = 3; // random per-message key
    long long r = mod_exp(g, k, p) % q;
    long long k_inv = mod_inverse(k, q);
    long long s = (k_inv * (hm + x * r)) % q;
    printf("Signature (r, s) = (%lld, %lld)\n", r, s);

    long long w = mod_inverse(s, q);
    long long u1 = (hm * w) % q;
    long long u2 = (r * w) % q;
    long long v = ((mod_exp(g, u1, p) * mod_exp(y, u2, p)) % p) % q;
    printf("Verification result v = %lld\n", v);

    if (v == r)
        printf("Signature is VALID.\n");
    else
        printf("Signature is INVALID.\n");

    return 0;
}
