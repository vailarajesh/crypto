#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100
int compare(const void *a, const void *b) {
    return (*(char *)a - *(char *)b);
}

void getOrder(char *key, int *order) {
    int len = strlen(key);
    char sortedKey[MAX];
    strcpy(sortedKey, key);
    qsort(sortedKey, len, sizeof(char), compare);

    for (int i = 0; i < len; i++) {
        for (int j = 0; j < len; j++) {
            if (key[i] == sortedKey[j] && order[j] == -1) {
                order[j] = i;
                break;
            }
        }
    }
}

void encrypt(char *message, char *key) {
    int msgLen = strlen(message);
    int keyLen = strlen(key);
    int rows = (msgLen + keyLen - 1) / keyLen; 
    char matrix[rows][keyLen];
    int k = 0;
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < keyLen; j++) {
            if (k < msgLen)
                matrix[i][j] = message[k++];
            else
                matrix[i][j] = 'X'; // Padding
        }

    int order[MAX];
    for (int i = 0; i < keyLen; i++) order[i] = -1;
    getOrder(key, order);
    printf("Encrypted text: ");
    for (int col = 0; col < keyLen; col++) {
        int actualCol = -1;
        for (int i = 0; i < keyLen; i++)
            if (order[i] == col)
                actualCol = i;

        for (int row = 0; row < rows; row++) {
            printf("%c", matrix[row][actualCol]);
        }
    }
    printf("\n");
}

int main() {
    char message[MAX], key[MAX];

    printf("Enter message (no spaces, uppercase): ");
    scanf("%s", message);

    printf("Enter key (word, uppercase): ");
    scanf("%s", key);

    encrypt(message, key);
    return 0;
}





OUTPUT : "C:\Users\RAJESH\OneDrive\Pictures\Screenshots\Screenshot 2025-06-18 223131.png"
