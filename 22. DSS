#include <stdio.h>
#include <stdint.h>
#include <string.h>

uint32_t simple_hash(const char *msg) {
    uint32_t hash = 0;
    for (int i = 0; msg[i]; i++)
        hash = (hash * 31 + msg[i]) % 101;  
    return hash;
}

int modexp(int base, int exp, int mod) {
    int result = 1;
    while (exp > 0) {
        if (exp % 2) result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int modinv(int k, int q) {
    for (int i = 1; i < q; i++)
        if ((k * i) % q == 1) return i;
    return -1;
}

int main() {
    int p = 23, q = 11, g = 4;

    int x = 3;
    int y = modexp(g, x, p);  

    char message[100];
    printf("Enter message: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = '\0';
    int hm = simple_hash(message); 

    int k = 2;  
    int r = modexp(g, k, p) % q;
    int kinv = modinv(k, q);
    int s = (kinv * (hm + x * r)) % q;

    printf("\nSignature (r, s): (%d, %d)\n", r, s);

    int w = modinv(s, q);
    int u1 = (hm * w) % q;
    int u2 = (r * w) % q;
    int v = ((modexp(g, u1, p) * modexp(y, u2, p)) % p) % q;

    printf("Verification value v: %d\n", v);
    if (v == r)
        printf("Signature is VALID.\n");
    else
        printf("Signature is INVALID.\n");

    return 0;
}
  
