#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

uint32_t leftrotate(uint32_t value, unsigned int count) {
    return (value << count) | (value >> (32 - count));
}

void sha1(const uint8_t *message, size_t len, uint8_t hash[20]) {
    uint32_t h0 = 0x67452301;
    uint32_t h1 = 0xEFCDAB89;
    uint32_t h2 = 0x98BADCFE;
    uint32_t h3 = 0x10325476;
    uint32_t h4 = 0xC3D2E1F0;

    size_t padded_len = ((len + 9 + 63) / 64) * 64;
    uint8_t *padded = calloc(padded_len, 1);
    memcpy(padded, message, len);
    padded[len] = 0x80;
    uint64_t bit_len = len * 8;
    for (int i = 0; i < 8; i++) {
        padded[padded_len - 1 - i] = bit_len >> (i * 8);
    }

    for (size_t offset = 0; offset < padded_len; offset += 64) {
        uint32_t w[80];
        for (int i = 0; i < 16; i++) {
            w[i] = (padded[offset + i * 4] << 24) |
                   (padded[offset + i * 4 + 1] << 16) |
                   (padded[offset + i * 4 + 2] << 8) |
                   (padded[offset + i * 4 + 3]);
        }

        for (int i = 16; i < 80; i++) {
            w[i] = leftrotate(w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16], 1);
        }

        uint32_t a = h0, b = h1, c = h2, d = h3, e = h4;

        for (int i = 0; i < 80; i++) {
            uint32_t f, k;
            if (i < 20) {
                f = (b & c) | ((~b) & d);
                k = 0x5A827999;
            } else if (i < 40) {
                f = b ^ c ^ d;
                k = 0x6ED9EBA1;
            } else if (i < 60) {
                f = (b & c) | (b & d) | (c & d);
                k = 0x8F1BBCDC;
            } else {
                f = b ^ c ^ d;
                k = 0xCA62C1D6;
            }

            uint32_t temp = leftrotate(a, 5) + f + e + k + w[i];
            e = d;
            d = c;
            c = leftrotate(b, 30);
            b = a;
            a = temp;
        }

        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
    }

    free(padded);

    hash[0] = h0 >> 24; hash[1] = h0 >> 16; hash[2] = h0 >> 8; hash[3] = h0;
    hash[4] = h1 >> 24; hash[5] = h1 >> 16; hash[6] = h1 >> 8; hash[7] = h1;
    hash[8] = h2 >> 24; hash[9] = h2 >> 16; hash[10] = h2 >> 8; hash[11] = h2;
    hash[12] = h3 >> 24; hash[13] = h3 >> 16; hash[14] = h3 >> 8; hash[15] = h3;
    hash[16] = h4 >> 24; hash[17] = h4 >> 16; hash[18] = h4 >> 8; hash[19] = h4;
}

void print_hash(uint8_t hash[20]) {
    for (int i = 0; i < 20; i++) {
        printf("%02x", hash[i]);
    }
    printf("\n");
}

int main() {
    char input[256];
    uint8_t hash[20];

    printf("Enter message: ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0';

    sha1((uint8_t*)input, strlen(input), hash);

    printf("SHA-1 Hash: ");
    print_hash(hash);

    return 0;
}
