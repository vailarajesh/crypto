#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int x;
    int y;
} Point;

int p = 23; 
int a = 1;   
int b = 1;   

int mod_inverse(int k, int p) {
    k = k % p;
    for (int x = 1; x < p; x++) {
        if ((k * x) % p == 1)
            return x;
    }
    return -1;
}

Point point_add(Point P, Point Q) {
    Point R;
    if (P.x == 0 && P.y == 0) return Q;
    if (Q.x == 0 && Q.y == 0) return P;

    int m;
    if (P.x == Q.x && P.y == Q.y) {
        // Point doubling
        m = (3 * P.x * P.x + a) * mod_inverse(2 * P.y, p);
    } else {
        // Point addition
        m = (Q.y - P.y) * mod_inverse(Q.x - P.x, p);
    }

    m = (m % p + p) % p;

    R.x = (m * m - P.x - Q.x) % p;
    R.x = (R.x + p) % p;

    R.y = (m * (P.x - R.x) - P.y) % p;
    R.y = (R.y + p) % p;

    return R;
}

Point scalar_multiply(Point P, int k) {
    Point R = {0, 0};  
    while (k > 0) {
        if (k % 2 == 1)
            R = point_add(R, P);
        P = point_add(P, P);
        k = k / 2;
    }
    return R;
}

int main() {
    Point G = {3, 10}; // base point
    int k = 7;         // private key

    Point publicKey = scalar_multiply(G, k);
    printf("Public key: (%d, %d)\n", publicKey.x, publicKey.y);
    return 0;
}
